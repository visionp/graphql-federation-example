<?php
/**
 * Autogenerated file by axtiva/flexible-graphql-php Do not edit it manually
 */ 
namespace GraphqlApp\Application\GraphQL;

use GraphQL\Type\Definition\Type;
use GraphQL\Type\Definition\InterfaceType;
use GraphQL\Type\Definition\ObjectType;
use GraphQL\Type\Definition\ListOfType;
use GraphQL\Type\Definition\NonNull;
use Axtiva\FlexibleGraphql\Type\EnumType;
use GraphQL\Type\Definition\InputObjectType;
use GraphQL\Type\Definition\CustomScalarType;
use GraphQL\Type\Definition\UnionType;
use GraphQL\Type\Definition\Directive;
use GraphQL\Type\Definition\Argument;
use GraphQL\Type\Definition\FieldDefinition;
use GraphQL\Type\Definition\InputObjectField;
use Psr\Container\ContainerInterface;
use GraphQL\Type\Schema;

class TypeRegistry
{
    private ContainerInterface $container;
    
    /**
     * @var array<string, Type>
     */
    private array $types = [];
    
    public function __construct(ContainerInterface $container)
    {
        $this->container = $container;
    }

    public function getType(string $name): Type
    {
        return $this->types[$name] ??= $this->{$name}();
    }
    
    
            public function link__Import()
            {
                return new CustomScalarType([
            'name' => 'link__Import',
            'description' => NULL,

        ]);
            }
        


            public function FieldSet()
            {
                return new CustomScalarType([
            'name' => 'FieldSet',
            'description' => NULL,

        ]);
            }
        


            public function Query()
            {
                return new ObjectType([
            'name' => 'Query',
            'description' => NULL,
            'fields' => fn() => ['myName' => new FieldDefinition([
            'name' => 'myName',
            'description' => NULL,
            'deprecationReason' => NULL,
            'resolve' => (function ($rootValue, $args, $context, $info) {
    
    return $this->container->get('GraphqlApp\Application\GraphQL\Resolver\Query\MyNameResolver')($rootValue, $args, $context, $info);
}),
            'type' => function() { return Type::nonNull(function() { return Type::string(); }); },
            'args' => [],
        ]),'_service' => new FieldDefinition([
            'name' => '_service',
            'description' => NULL,
            'deprecationReason' => NULL,
            'resolve' => (function ($rootValue, $args, $context, $info) {
    
    return $this->container->get('GraphqlApp\Application\GraphQL\Resolver\Query\_ServiceResolver')($rootValue, $args, $context, $info);
}),
            'type' => function() { return Type::nonNull(function() { return $this->getType('_Service'); }); },
            'args' => [],
        ])],
        ]);
            }
        


            public function _FieldSet()
            {
                return new CustomScalarType([
            'name' => '_FieldSet',
            'description' => NULL,

        ]);
            }
        


            public function _Service()
            {
                return new ObjectType([
            'name' => '_Service',
            'description' => NULL,
            'fields' => fn() => ['sdl' => new FieldDefinition([
            'name' => 'sdl',
            'description' => NULL,
            'deprecationReason' => NULL,
            // No resolver. Default used
            'type' => function() { return Type::nonNull(function() { return Type::string(); }); },
            'args' => [],
        ])],
        ]);
            }
        

    public function Mutation()
    {
        return new ObjectType(['name' => 'Mutation']);
    }


    public function directive_link()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'link',
            'description' => NULL,
            'isRepeatable' => true,
            'locations' => ['SCHEMA'],
            'args' => [
                [
            'name' => 'url',
            'type' => function() { return Type::string(); },
        ],[
            'name' => 'as',
            'type' => function() { return Type::string(); },
        ],[
            'name' => 'import',
            'type' => function() { return new ListOfType(function() { return $this->getType('link__Import'); }); },
        ]
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_external()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'external',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['OBJECT','FIELD_DEFINITION'],
            'args' => [
                
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_requires()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'requires',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['FIELD_DEFINITION'],
            'args' => [
                [
            'name' => 'fields',
            'type' => function() { return Type::nonNull(function() { return $this->getType('FieldSet'); }); },
        ]
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_provides()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'provides',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['FIELD_DEFINITION'],
            'args' => [
                [
            'name' => 'fields',
            'type' => function() { return Type::nonNull(function() { return $this->getType('FieldSet'); }); },
        ]
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_key()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'key',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['OBJECT','INTERFACE'],
            'args' => [
                [
            'name' => 'fields',
            'type' => function() { return Type::nonNull(function() { return $this->getType('FieldSet'); }); },
        ]
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_extends()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'extends',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['OBJECT','INTERFACE'],
            'args' => [
                
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_shareable()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'shareable',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['OBJECT','FIELD_DEFINITION'],
            'args' => [
                
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_inaccessible()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'inaccessible',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['FIELD_DEFINITION','OBJECT','INTERFACE','UNION','ARGUMENT_DEFINITION','SCALAR','ENUM','ENUM_VALUE','INPUT_OBJECT','INPUT_FIELD_DEFINITION'],
            'args' => [
                
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_override()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'override',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['FIELD_DEFINITION'],
            'args' => [
                [
            'name' => 'from',
            'type' => function() { return Type::nonNull(function() { return Type::string(); }); },
        ]
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_tag()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'tag',
            'description' => NULL,
            'isRepeatable' => true,
            'locations' => ['FIELD_DEFINITION','INTERFACE','OBJECT','UNION','ARGUMENT_DEFINITION','SCALAR','ENUM','ENUM_VALUE','INPUT_OBJECT','INPUT_FIELD_DEFINITION'],
            'args' => [
                [
            'name' => 'name',
            'type' => function() { return Type::nonNull(function() { return Type::string(); }); },
        ]
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_federation__tag()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'federation__tag',
            'description' => NULL,
            'isRepeatable' => true,
            'locations' => ['FIELD_DEFINITION','INTERFACE','OBJECT','UNION','ARGUMENT_DEFINITION','SCALAR','ENUM','ENUM_VALUE','INPUT_OBJECT','INPUT_FIELD_DEFINITION'],
            'args' => [
                [
            'name' => 'name',
            'type' => function() { return Type::nonNull(function() { return Type::string(); }); },
        ]
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_federation__shareable()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'federation__shareable',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['OBJECT','FIELD_DEFINITION'],
            'args' => [
                
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_federation__inaccessible()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'federation__inaccessible',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['FIELD_DEFINITION','OBJECT','INTERFACE','UNION','ARGUMENT_DEFINITION','SCALAR','ENUM','ENUM_VALUE','INPUT_OBJECT','INPUT_FIELD_DEFINITION'],
            'args' => [
                
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_federation__override()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'federation__override',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['FIELD_DEFINITION'],
            'args' => [
                [
            'name' => 'from',
            'type' => function() { return Type::nonNull(function() { return Type::string(); }); },
        ]
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_federation__external()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'federation__external',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['FIELD_DEFINITION'],
            'args' => [
                
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_federation__requires()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'federation__requires',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['FIELD_DEFINITION'],
            'args' => [
                [
            'name' => 'fields',
            'type' => function() { return Type::nonNull(function() { return $this->getType('FieldSet'); }); },
        ]
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_federation__provides()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'federation__provides',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['FIELD_DEFINITION'],
            'args' => [
                [
            'name' => 'fields',
            'type' => function() { return Type::nonNull(function() { return $this->getType('FieldSet'); }); },
        ]
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_federation__key()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'federation__key',
            'description' => NULL,
            'isRepeatable' => true,
            'locations' => ['OBJECT','INTERFACE'],
            'args' => [
                [
            'name' => 'fields',
            'type' => function() { return Type::nonNull(function() { return $this->getType('FieldSet'); }); },
        ],[
            'name' => 'resolvable',
            'type' => function() { return Type::boolean(); },
            'defaultValue' => true,
        ]
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function directive_federation__extends()
    {
        static $directive = null;
        if ($directive === null) {
            $directive = new Directive([
            'name' => 'federation__extends',
            'description' => NULL,
            'isRepeatable' => false,
            'locations' => ['OBJECT','INTERFACE'],
            'args' => [
                
            ],
        ]);
        }
        
        return $directive;
    }
        


    public function getDirectives()
    {
        return [$this->directive_link(),$this->directive_external(),$this->directive_requires(),$this->directive_provides(),$this->directive_key(),$this->directive_extends(),$this->directive_shareable(),$this->directive_inaccessible(),$this->directive_override(),$this->directive_tag(),$this->directive_federation__tag(),$this->directive_federation__shareable(),$this->directive_federation__inaccessible(),$this->directive_federation__override(),$this->directive_federation__external(),$this->directive_federation__requires(),$this->directive_federation__provides(),$this->directive_federation__key(),$this->directive_federation__extends()];
    }
        

}

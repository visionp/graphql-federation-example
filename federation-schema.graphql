schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Book
  @join__type(graph: BOOK_SERVICE, key: "id")
{
  id: ID!
  title: String!
  author: User!
  summery: String! @join__field(graph: BOOK_SERVICE, requires: "author {email}")
}

scalar DateTime
  @join__type(graph: USER_SERVICE)

scalar join__FieldSet

enum join__Graph {
  BOOK_SERVICE @join__graph(name: "book-service", url: "http://book-service:8080/graphql")
  USER_SERVICE @join__graph(name: "user-service", url: "http://user-service-nginx:80/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: BOOK_SERVICE)
{
  removeBook(id: ID!): Boolean!
}

type Profile
  @join__type(graph: USER_SERVICE, key: "id")
{
  id: ID!
  rating: Int!
  user: User!
}

type Query
  @join__type(graph: BOOK_SERVICE)
  @join__type(graph: USER_SERVICE)
{
  books: [Book!]! @join__field(graph: BOOK_SERVICE)
  getUsers(limit: Int): [User!]! @join__field(graph: USER_SERVICE)
}

type User
  @join__type(graph: BOOK_SERVICE, key: "id", extension: true)
  @join__type(graph: USER_SERVICE, key: "id")
{
  id: ID!
  email: String! @join__field(graph: BOOK_SERVICE, external: true) @join__field(graph: USER_SERVICE)
  books: [Book!]! @join__field(graph: BOOK_SERVICE)
  name: String! @join__field(graph: USER_SERVICE)
  profile: Profile @join__field(graph: USER_SERVICE)
  userFeatureFlags: [UserFeatureFlag!]! @join__field(graph: USER_SERVICE)
  gender: UserGender! @join__field(graph: USER_SERVICE)
  createdAt: DateTime! @join__field(graph: USER_SERVICE)
}

type UserFeatureFlag
  @join__type(graph: USER_SERVICE, key: "id")
{
  id: ID!
  name: String!
  user: User!
}

enum UserGender
  @join__type(graph: USER_SERVICE)
{
  MALE @join__enumValue(graph: USER_SERVICE)
  FEMALE @join__enumValue(graph: USER_SERVICE)
}
<?php

declare (strict_types=1);
namespace UserService\Application\GraphQL\Representation;

use GraphQL\Deferred;
use GraphQL\Type\Definition\ResolveInfo;
use Axtiva\FlexibleGraphql\Representation;
use Axtiva\FlexibleGraphql\Resolver\FederationRepresentationResolverInterface;
use UserService\Application\GraphQL\Buffer\UserBuffer;
use UserService\Application\GraphQL\Mapper\UserMapper;

/**
 * This code is @generated by axtiva/flexible-graphql-php
 * Representation resolver for federated graphql type User
 */
final readonly class UserRepresentation implements FederationRepresentationResolverInterface
{
    public function __construct(
         private UserBuffer $buffer,
    )
    {
    }

    public function getTypeName(): string
    {
        return 'User';
    }

    public function __invoke(Representation $representation, $context, ResolveInfo $info)
    {
        $id = $representation->getFields()['id'];
        $this->buffer->add($id);

        return new Deferred(function () use ($id) {
            return UserMapper::map(
                $this->buffer->get($id)
            );
        });
    }
}